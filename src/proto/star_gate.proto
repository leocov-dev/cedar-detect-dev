syntax = "proto3";

import "google/protobuf/duration.proto";

package star_gate;

message CentroidsRequest {
  // The image to analyze. The entire image is scanned for stars, excluding the
  // three leftmost and three rightmost columns.
  Image input_image = 1;

  // Specifies the statistical significance threshold used for discriminating
  // stars from background. Given a noise measure N, a pixel's value must be at
  // least `sigma`*N greater than the background value in order to be considered
  // a star candidate. Higher `sigma` values yield fewer stars; lower `sigma`
  // values yield more stars but increase the likelihood of noise-induced false
  // positives.
  // Typical `sigma` values: 5-10.
  float sigma = 2;

  // StarGate clumps adjacent bright pixels to form a single star candidate. The
  // `max_size` argument governs how large a clump can be before it is rejected.
  // Note that making `max_size` small can eliminate very bright stars that
  // "bleed" to many surrounding pixels.
  // Typical `max_size` values: 3-5.
  int32 max_size = 3;

  // If true, in addition to identifying star candidates, the StarGate algorithm
  // should also return a 2x2 binning of `input_image`, with hot pixels
  // eliminated.
  bool return_binned = 4;

  // If true, a 2x2 binning of `input_image` is processed to identify star
  // candidates instead of using the full-res `input_image`. This is useful for
  // situations where the `input_image` pixels are greatly oversampling the
  // spatial resolution, in other words stars are not tightly focused to ~2
  // pixels FWHM.
  // Note that centroid positions are reported in full-res `input_image`
  // coordinates even if the binned image is the source of candidates.
  bool use_binned_for_star_candidates = 5;
}

message CentroidsResult {
  // Estimated RMS noise level of the request's `input_image`.
  float noise_estimate = 1;

  // The number of hot pixels seen. See algorithm implementation for more
  // information about hot pixels.
  int32 hot_pixel_count = 2;

  // The star candidates detected by StarGate; ordered by highest
  // mean_brightness first.
  repeated StarCentroid star_candidates = 3;

  // If `return_binned` is present the request, this is the result.
  optional Image binned_image = 4;

  // The time spent in the StarGate algorithm. The client can subtract this from
  // the overall RPC time to glean the RPC overhead, which is likely dominated
  // by the time needed to transfer `input_image` in the request.
  google.protobuf.Duration algorithm_time = 5;
}

message Image {
  int32 width = 1;
  int32 height = 2;

  // Row major format, uint8 grayscale pixels.
  bytes image_data = 3;

  // TODO: option to convey image data via shared memory (mmap()ed file).
}

// Summarizes a star-like spot found by the StarGate algorithm.
message StarCentroid {
  // Location of star centroid in full resolution image coordinates.
  ImageCoord centroid_position = 1;

  // Characterizes the extent or spread of the star in each direction, in pixel
  // size units.
  float stddev_x = 2;
  float stddev_y = 3;

  // Mean of the uint8 pixel values of the star's region (core plus immediate
  // neighbors). The estimated background is subtracted.
  float mean_brightness = 4;

  // The estimated sky background near the star.
  float background = 5;

  // Count of saturated pixel values.
  int32 num_saturated = 6;
}

message ImageCoord {
  // A location in full resolution image coordinates. (0.5, 0.5) corresponds to
  // the center of the image's upper left pixel.
  float x = 1;
  float y = 2;
}

service StarGate {
  rpc ExtractCentroids(CentroidsRequest) returns (CentroidsResult);
}
